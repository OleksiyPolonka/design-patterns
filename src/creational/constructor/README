# Constructor Pattern

The Constructor Pattern is a design approach in object-oriented programming that focuses on object creation and initialization through a dedicated constructor function or method. This pattern encapsulates the instantiation logic, making object creation straightforward and consistent.

## Overview

The Constructor Pattern leverages a specialized function (or class constructor) to:
- **Initialize new objects:** Set up default or provided property values.
- **Encapsulate instantiation logic:** Keep object creation details centralized.
- **Facilitate code reuse:** Allow multiple instances of similar objects with standardized initialization.

## Intent

The primary goals of the Constructor Pattern are to:
- **Simplify object creation:** Provide a clear, reusable mechanism for creating objects.
- **Maintain encapsulation:** Hide the complexity of initialization within the constructor.
- **Enhance readability:** Offer a self-explanatory structure for developers to understand how objects are built.

## Structure

- **Constructor Function/Method:** The central function that creates and initializes an object.
- **Properties:** Attributes set within the constructor, either by default or via parameters.
- **Prototype Methods (optional):** Shared functions defined on the prototype to ensure efficiency and consistency across instances.

## Implementation Example

Below is an example using JavaScript:

```javascript
// Constructor function for creating a Person object
class Person {
  constructor(name, age) {
    // Initialize object properties
    this.name = name;
    this.age = age;
  }

  greet() {
    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
  };
}

// Creating a new instance of Person using the constructor
const person1 = new Person('Alice', 30);
person1.greet(); // Output: Hello, my name is Alice and I am 30 years old.
